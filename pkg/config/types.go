package config

import (
	"go.xbrother.com/nix-operator/pkg/utils"
)

const (
	CommentHeader = "# Generated by nix-operator. DO NOT EDIT.\n"
)

type SystemConfiguration struct {
	APIVersion string   `yaml:"apiVersion"`
	Kind       string   `yaml:"kind"`
	Metadata   Metadata `yaml:"metadata"`
	Spec       Spec     `yaml:"spec"`
}

type Metadata struct {
	Name string `yaml:"name"`
}

type Spec struct {
	Network NetworkConfig  `yaml:"network"`
	System  SystemConfig   `yaml:"system"`
	Serials []SerialConfig `yaml:"serials"`
	Udev    UdevConfig     `yaml:"udev"`
}

type NetworkConfig struct {
	Interfaces []Interface `yaml:"interfaces"`
	DNS        DNSConfig   `yaml:"dns"`
	Hosts      []HostEntry `yaml:"hosts"`
	Firewall   Firewall    `yaml:"firewall"`
}

type Interface struct {
	NodeSelector utils.NodeSelector `yaml:"nodeSelector"`
	Name         string             `yaml:"name"`
	IPAddress    string             `yaml:"ipAddress"`   // IPv4 地址
	IPv6Address  string             `yaml:"ipv6Address"` // IPv6 地址
	Gateway      string             `yaml:"gateway"`     // IPv4 网关
	IPv6Gateway  string             `yaml:"ipv6Gateway"` // IPv6 网关
	MTU          int                `yaml:"mtu"`
	MACAddress   string             `yaml:"macAddress"`
}

type SerialConfig struct {
	Device      string             `yaml:"device"`
	DisplayName string             `yaml:"displayName"`
	BaudRate    int                `yaml:"baudRate"`
	DataBits    int                `yaml:"dataBits"`
	StopBits    int                `yaml:"stopBits"`
	Parity      string             `yaml:"parity"`
	Mode        string             `yaml:"mode"`                  // "rs232" 或 "rs485"
	RS485       *RS485Config       `yaml:"rs485,omitempty"`       // RS485 特定配置
	Transparent *TransparentConfig `yaml:"transparent,omitempty"` // 透传配置
}

type RS485Config struct {
	Enabled            bool `yaml:"enabled"`            // 启用 RS485 模式
	RTSOnSend          bool `yaml:"rtsOnSend"`          // 发送时 RTS 信号状态
	RTSAfterSend       bool `yaml:"rtsAfterSend"`       // 发送后 RTS 信号状态
	RTSDelay           int  `yaml:"rtsDelay"`           // RTS 延迟时间（微秒）
	DelayRTSBeforeSend int  `yaml:"delayRTSBeforeSend"` // 发送前 RTS 延迟（微秒）
	DelayRTSAfterSend  int  `yaml:"delayRTSAfterSend"`  // 发送后 RTS 延迟（微秒）
	ReceiveTimeout     int  `yaml:"receiveTimeout"`     // 接收超时（毫秒）
}

type TransparentConfig struct {
	Enabled    bool   `yaml:"enabled"`    // 启用透传功能
	Protocol   string `yaml:"protocol"`   // 透传协议 "tcp" 或 "udp"
	ListenAddr string `yaml:"listenAddr"` // 监听地址，如 "0.0.0.0:8080"
	BufferSize int    `yaml:"bufferSize"` // 缓冲区大小（字节）
	Timeout    int    `yaml:"timeout"`    // 连接超时（秒）
}

type DNSConfig struct {
	Nameservers []string `yaml:"nameservers"`
}

type HostEntry struct {
	IP        string   `yaml:"ip"`
	Hostnames []string `yaml:"hostnames"`
}

type Firewall struct {
	Rules []FirewallRule `yaml:"rules"`
}

type FirewallRule struct {
	Port     int    `yaml:"port"`
	Protocol string `yaml:"protocol"`
	Action   string `yaml:"action"`
}

type SystemConfig struct {
	Timezone string    `yaml:"timezone"`
	NTP      NTPConfig `yaml:"ntp"`
}

type NTPConfig struct {
	Enabled bool     `yaml:"enabled"`
	Servers []string `yaml:"servers"`
}

type UdevConfig struct {
	Rules []UdevRule `yaml:"rules"`
}

type UdevRule struct {
	Name      string            `yaml:"name"`
	Subsystem string            `yaml:"subsystem"`
	Attrs     map[string]string `yaml:"attrs"`
	Symlink   string            `yaml:"symlink"`
}
